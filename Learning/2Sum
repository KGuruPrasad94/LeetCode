## 1. Two Sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109

------------------------------------------------------------
Solution:

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:

        numsMap = {}
        comp = 0

        #approach
        # 1. Brute Force -  Use 2 for loops to check every pair and return indexes. 
        #Time complexity : O(n^2), Space complexity : O(1)
        
        # 2. Optimal solution - Use HashMap to store index of unseen numbers. Iterate through nums array and check if complement of num is present in map. If present, return the index
        #Time complexity : O(n), Space complexity : O(n)

        for i,n in enumerate(nums):
            comp = target - n # calculate complement 

            if comp in numsMap: # if comp found in map, return index
                return(numsMap[comp], i)

            numsMap[n] = i # store the index in map
